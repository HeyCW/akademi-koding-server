AWSTemplateFormatVersion: '2010-09-09'
Description: AWS infrastructure setup for Akademi Koding

Resources:
  AccountVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: akademi-koding-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: akademi-koding-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AccountVpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AccountVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: akademi-koding-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AccountVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: akademi-koding-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AccountVpc
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: akademi-koding-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AccountVpc
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: akademi-koding-private-subnet-2

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  Nat:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: akademi-koding-nat

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AccountVpc
      Tags:
        - Key: Name
          Value: akademi-koding-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AccountVpc
      Tags:
        - Key: Name
          Value: akademi-koding-private-route-table-1

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Nat

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref AccountVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  SecurityGroupAPI:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref AccountVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SecurityGroupPublic
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Ref SecurityGroupPublic

  SecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL and SSH access to DB
      VpcId: !Ref AccountVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SecurityGroupPublic
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref SecurityGroupAPI
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  SecurityGroupElasticCache:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for ElastiCache Memcached"
      VpcId: !Ref AccountVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref SecurityGroupAPI
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp:

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Subnet group for ElastiCache Memcached"
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: memcached
      NumCacheNodes: 2
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      SecurityGroupIds:
        - !Ref SecurityGroupElasticCache
      Tags:
        - Key: Name
          Value: akademi-koding-elasticache

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Akademi Koding RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: akademi-koding-rds-subnet-group

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0'
      MasterUsername: Admin123
      MasterUserPassword: Admin12345
      DBSubnetGroupName: !Ref SubnetGroup
      DBName: akademikoding
      PubliclyAccessible: true
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref SecurityGroupDB
      Tags:
        - Key: Name
          Value: akademi-koding-rds

  LoadBalancerApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: akademi-koding-lb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupPublic
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: akademi-koding-lb-app

  LoadBalancerServer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: akademi-koding-lb-server
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref SecurityGroupAPI
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: akademi-koding-lb-server

  EC2TemplateApp:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: akademi-koding-app
      LaunchTemplateData:
        ImageId: ami-063d43db0594b521b
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref SecurityGroupPublic
        KeyName: akademi-koding
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash

            # Update the package repository
            sudo yum update -y
            
            # Install node
            sudo yum install nodejs npm -y

            # Install git
            sudo yum install git -y

            # Git clone the app repository
            git clone https://github.com/nicholasf09/akademi-koding.git

            # Change directory to the app repository
            cd akademi-koding

            # Install the app dependencies
            npm install

            # Persist the API endpoint in the environment file
            echo "VITE_API_ENDPOINT=${LoadBalancerServer.DNSName}" | sudo tee -a /etc/environment

            # Source the environment file to load it into the current shell session
            source /etc/environment

            # Start the app
            npm run dev -- --host

  EC2TemplateServer:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: akademi-koding-server
      LaunchTemplateData:
        ImageId: ami-063d43db0594b521b
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref SecurityGroupAPI
        KeyName: akademi-koding
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            # Update the package repository
            sudo yum update -y

            # Install node
            sudo yum install nodejs npm -y
           
            # Install git
            sudo yum install git -y

            # Git clone the server repository
            git clone https://github.com/HeyCW/akademi-koding-server.git

            # Change directory to the server repository
            cd akademi-koding-server

            # Install the server dependencies
            npm install

            # Persist the DB endpoint in the environment file
            echo "DB_ENDPOINT=${DBInstance.Endpoint.Address}" | sudo tee -a /etc/environment
            echo "ELASTICACHE_ENDPOINT=123" | sudo tee -a /etc/environment

            # Source the environment file to load DB_ENDPOINT
            source /etc/environment

            # Start the server
            npm start

  TargetGroupApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: akademi-koding-target-group-app
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort: 5173
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 5173
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref AccountVpc
      TargetType: instance
      Tags:
        - Key: Name
          Value: akademi-koding-tg

  TargetGroupServer:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: akademi-koding-tg-server
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref AccountVpc
      TargetType: instance
      Tags:
        - Key: Name
          Value: akademi-koding-tg-server

  ListenerApp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupApp
      LoadBalancerArn: !Ref LoadBalancerApp
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: akademi-koding-listener

  ListenerServer:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupServer
      LoadBalancerArn: !Ref LoadBalancerServer
      Port: 3000
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: akademi-koding-listener-server

  AutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: akademi-koding-app-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2TemplateApp
        Version: !GetAtt EC2TemplateApp.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref TargetGroupApp
      Tags:
        - Key: Name
          Value: akademi-koding-asg
          PropagateAtLaunch: true
  
  AppScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupApp
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
      EstimatedInstanceWarmup: 300

  AutoScalingGroupServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: akademi-koding-server-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2TemplateServer
        Version: !GetAtt EC2TemplateServer.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroupServer
      Tags:
        - Key: Name
          Value: akademi-koding-asg-server
          PropagateAtLaunch: true

  ServerScalePolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupServer
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
      EstimatedInstanceWarmup: 300
 

Outputs:
  AccountVpcId:
    Value: !Ref AccountVpc
    Description: VPC ID of the Akademi Koding VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId
  AccountVpcCidr:
    Value: !GetAtt AccountVpc.CidrBlock
    Description: CIDR block of the Akademi Koding VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCCidr
  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
    Description: Subnet ID of the Akademi Koding Public Subnet 1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1Id
  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
    Description: Subnet ID of the Akademi Koding Public Subnet 2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2Id
  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1
    Description: Subnet ID of the Akademi Koding Private Subnet 1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1Id
  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2
    Description: Subnet ID of the Akademi Koding Private Subnet 2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2Id
  RDSInstanceEndpoint:
    Value: !GetAtt DBInstance.Endpoint.Address
    Description: Endpoint of the Akademi Koding RDS instance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstanceEndpoint
  RDSInstancePort:
    Value: !GetAtt DBInstance.Endpoint.Port
    Description: Port of the Akademi Koding RDS instance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstancePort
  RDSInstanceUsername:
    Value: admin
    Description: Username of the Akademi Koding RDS instance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstanceUsername
  RDSInstancePassword:
    Value: admin123
    Description: Password of the Akademi Koding
  DBEndpoint:
    Description: RDS MySQL Endpoint
    Value: !GetAtt DBInstance.Endpoint.Address

Metadata:
  MyMetaData:
    VPCId: !Ref AccountVpc